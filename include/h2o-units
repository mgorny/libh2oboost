/* libh2oboost -- steam & water properties
 * (c) 2012 Michał Górny
 * Released under the terms of the 2-clause BSD license
 */

#pragma once

#ifndef _H2O_UNITS_HXX
#define _H2O_UNITS_HXX 1

#include <boost/units/absolute.hpp>
#include <boost/units/make_scaled_unit.hpp>
#include <boost/units/quantity.hpp>
#include <boost/units/static_rational.hpp>
#include <boost/units/physical_dimensions/specific_energy.hpp>
#include <boost/units/physical_dimensions/specific_heat_capacity.hpp>
#include <boost/units/physical_dimensions/specific_volume.hpp>
#include <boost/units/systems/si/base.hpp>
#include <boost/units/systems/si/dimensionless.hpp>
#include <boost/units/systems/si/mass_density.hpp>
#include <boost/units/systems/si/pressure.hpp>
#include <boost/units/systems/si/temperature.hpp>
#include <boost/units/systems/temperature/celsius.hpp>

namespace h2o
{
	namespace boost
	{
		namespace unit_type
		{
			typedef ::boost::units::make_scaled_unit
			<
				::boost::units::si::pressure,
				::boost::units::scale
				<
					10, ::boost::units::static_rational<6>
				>
			>::type MPa;

			typedef ::boost::units::absolute
					< ::boost::units::si::temperature > K;
			typedef ::boost::units::si::dimensionless dimless;
			typedef ::boost::units::si::mass_density kg_m3;

			typedef ::boost::units::unit
			<
				::boost::units::specific_volume_dimension,
				::boost::units::si::system
			> m3_kg;
			typedef ::boost::units::unit
			<
				::boost::units::specific_energy_dimension,
				::boost::units::si::system
			> J_kg;
			typedef ::boost::units::unit
			<
				::boost::units::specific_heat_capacity_dimension,
				::boost::units::si::system
			> J_kgK;

			typedef ::boost::units::make_scaled_unit
			<
				J_kg,
				::boost::units::scale
				<
					10, ::boost::units::static_rational<3>
				>
			>::type kJ_kg;
			typedef ::boost::units::make_scaled_unit
			<
				J_kgK,
				::boost::units::scale
				<
					10, ::boost::units::static_rational<3>
				>
			>::type kJ_kgK;

			// auxiliary units

			typedef ::boost::units::make_scaled_unit
			<
				::boost::units::si::pressure,
				::boost::units::scale
				<
					10, ::boost::units::static_rational<5>
				>
			>::type bar;
			typedef ::boost::units::make_scaled_unit
			<
				::boost::units::si::pressure,
				::boost::units::scale
				<
					10, ::boost::units::static_rational<3>
				>
			>::type kPa;
			typedef ::boost::units::absolute
					< ::boost::units::celsius::temperature > degC;
		}

		namespace unit
		{
			// base/preferred units

			static const unit_type::MPa MPa;
			static const unit_type::K K;
			static const unit_type::kg_m3 kg_m3;

			static const unit_type::m3_kg m3_kg;
			static const unit_type::kJ_kg kJ_kg;
			static const unit_type::kJ_kgK kJ_kgK;

			// auxiliary units

			static const unit_type::bar bar;
			static const unit_type::kPa kPa;
			static const unit_type::degC degC;
		}

		namespace quantity
		{
			typedef ::boost::units::quantity<unit_type::MPa> MPa;
			typedef ::boost::units::quantity<unit_type::K> K;
			typedef ::boost::units::quantity<unit_type::dimless> dimless;
			typedef ::boost::units::quantity<unit_type::kg_m3> kg_m3;

			typedef ::boost::units::quantity<unit_type::m3_kg> m3_kg;
			typedef ::boost::units::quantity<unit_type::kJ_kg> kJ_kg;
			typedef ::boost::units::quantity<unit_type::kJ_kgK> kJ_kgK;

			// auxiliary units

			typedef ::boost::units::quantity<unit_type::bar> bar;
			typedef ::boost::units::quantity<unit_type::kPa> kPa;
			typedef ::boost::units::quantity<unit_type::degC> degC;
		}
	}
}

#endif /*_H2O_UNITS_HXX*/

// vim:syn=cpp
